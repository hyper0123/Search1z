# .github/workflows/scan-astrapanel-by-country.yml
name: Escaneo Astra Panel por país y validación de canales

on:
  workflow_dispatch:
    inputs:
      country:
        description: "Código de país para filtrar hosts (ej: AR, BR, MX)"
        required: true
        default: "AR"
      playlist_path:
        description: "Ruta del playlist en el servidor (ej: playlist.m3u)"
        required: true
        default: "playlist.m3u"

permissions:
  contents: write  # Permitir commit y push de listas generadas

jobs:
  collect-hosts:
    name: Recolectar hosts desde Shodan, ZoomEye y Fofa
    runs-on: ubuntu-latest
    outputs:
      urls: ${{ steps.concat.outputs.urls }}
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      - name: Configurar variables de entorno
        run: |
          echo "COUNTRY=${{ github.event.inputs.country }}" >> $GITHUB_ENV
          echo "PLAY_PATH=${{ github.event.inputs.playlist_path }}" >> $GITHUB_ENV

            - name: Buscar con Shodan (API)
        id: shodan
        env:
          SHODAN_KEY: ${{ secrets.SHODAN_API_KEY }}
        run: |
          # Usa la API REST de Shodan para buscar Astra Control Panel en el país
          curl -s "https://api.shodan.io/shodan/host/search?key=$SHODAN_KEY&query=http.title:\"Astra Control Panel\"%20country:${{ env.COUNTRY }}&limit=1000" \
            | jq -r '.matches[] | .ip_str+":"+(.port|tostring)' \
            | sed "s#^#http://#; s#$#/${{ env.PLAY_PATH }}#" > shodan_urls.txt zoomeye_urls.txt fofa_urls.txt 2>/dev/null \
            | sort -u > all_urls.txt || touch all_urls.txt
          # Prepara salida para siguiente job
          URLS=$(paste -sd ' ' all_urls.txt)
          echo "urls=$URLS" >> $GITHUB_OUTPUT

  validate-playlists:
    name: Validar playlists y sus canales
    needs: collect-hosts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      - name: Preparar carpeta de listas
        run: mkdir -p playlists/${{ github.event.inputs.country }}

      - name: Validar cada playlist y canales
        run: |
          INDEX=1
          # Itera sobre cada URL obtenida
          echo "${{ needs.collect-hosts.outputs.urls }}" | tr ' ' '\n' > urls_to_check.txt

          while read PLAY_URL; do
            echo "Comprobando playlist: $PLAY_URL"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$PLAY_URL")
            if [ "$STATUS" -ne 200 ]; then
              echo "  ❌ Playlist no disponible"
              continue
            fi

            # Descarga la playlist temporal
            PLAY_FILE="tmp_playlist.m3u"
            curl -s "$PLAY_URL" -o "$PLAY_FILE"

            OUT_FILE="playlists/${{ github.event.inputs.country }}/Lista_${{ github.event.inputs.country }}_${INDEX}.m3u"
            echo "#EXTM3U" > "$OUT_FILE"

            # Valida cada canal en la playlist
            grep -E '^http' "$PLAY_FILE" | while read CH_URL; do
              CH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$CH_URL")
              if [ "$CH_STATUS" -eq 200 ]; then
                echo "#EXTINF:-1,$CH_URL" >> "$OUT_FILE"
                echo "$CH_URL" >> "$OUT_FILE"
              fi
              sleep 1  # pausa entre canales
            done

            # Si hay canales válidos, incrementa índice; si no, elimina lista
            if grep -q '^http' "$OUT_FILE"; then
              echo "  ✅ Lista guardada: $OUT_FILE"
              INDEX=$((INDEX+1))
            else
              rm "$OUT_FILE"
              echo "  ⚠️ Sin canales válidos en esta playlist"
            fi

          done < urls_to_check.txt

      - name: Commit y push de las listas
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add playlists/${{ github.event.inputs.country }}/*.m3u
          git commit -m "Add valid playlists for ${{ github.event.inputs.country }}" || echo "No hay cambios"
          git push
